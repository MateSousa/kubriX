{{- range $team := .Values.teams }}
{{- $helmRepo := coalesce $team.multiStageKargoAppSetHelmRepo $.Values.multiStageKargoAppSetHelmRepo }}
{{- if and $team.multiStageKargoAppSet $helmRepo }}
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: {{ $team.name }}-appset
  namespace: adn-{{ $team.name }}
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  generators:
  - scmProvider:
      cloneProtocol: https
      {{- with $team.multiStageKargoAppSet.gitlab }}
      gitlab:
        group: {{ .group }}
        api: {{ .api }}
        tokenRef:
          secretName: {{ $team.name }}-appset-github-token
          key: token
      {{- end }}
      {{- with $team.multiStageKargoAppSet.github }}
      github:
        # The GitHub organization to scan.
        organization: {{ .organization }}
        tokenRef:
          secretName: {{ $team.name }}-appset-github-token
          key: token
      {{- end }}
      filters:
      - repositoryMatch: ^{{ .name }}
        pathsExist: [app-stages.yaml]
      requeueAfterSeconds: {{ $.Values.scmAppsetRequeueAfterSeconds }}
  template:
    metadata:
      name: '{{`{{ .repository }}`}}'
      finalizers:
      - resources-finalizer.argocd.argoproj.io
    spec:
      project: {{ $team.name }}-project
      sources:
      - repoURL: {{ $helmRepo | quote }}
        targetRevision: '{{ $.Values.default.targetRevision }}'
        path: team-apps/onboarding-apps-charts/multi-stage-app-with-kargo-pipeline
        helm:
          valueFiles:
          - $values/app-stages.yaml
      - repoURL: '{{`{{ .url }}`}}'
        targetRevision: main
        ref: values
      destination:
        server: https://kubernetes.default.svc
        namespace: adn-{{ $team.name }}
      syncPolicy:
        automated:
          selfHeal: true
          prune: true
---
{{- else if $team.multiStageKargoAppSet }}
{{- fail (printf "multiStageKargoAppSetHelmRepo is required (team-level or global) for team %q" $team.name) }}
{{- end }}
{{- end }}
